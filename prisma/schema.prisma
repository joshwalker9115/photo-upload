datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

model User {
  id            String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  images        Image[]
  settings      UserSettings?
}

enum ColorScheme {
  System
  Dark
  Light
}

model UserSettings {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  colorScheme ColorScheme @default(System)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String      @unique @db.Uuid
}

model Account {
  id                String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_in        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Image {
  id        Int      @id @default(autoincrement())
  userId    String   @db.Uuid
  pathKey   String   @unique
  createdAt DateTime @default(now())
  fileType  String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
